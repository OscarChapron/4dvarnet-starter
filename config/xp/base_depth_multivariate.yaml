# @package _global_
ckpt: null  # null or path to a checkpoint
resolution: '1_20'  # '1_20' or '1_8' (apostrophes « ' » are necessary!)

paths:
    inp:
      train: '/Odyssey/public/enatl60/celerity/eNATL60_BLB002_cutoff_freq_regrid_0_1000m.nc'
      test: '/Odyssey/public/natl60/celerity/NATL60GULF-CJM165_cutoff_freq_regrid_0_1000m.nc'

    inp_pca:
      train: '/Odyssey/public/enatl60/celerity/PCA/eNATL_pca_train.nc'
      test: '/Odyssey/public/natl60/celerity/PCA/NATL_pca_test.nc'

    inp_sst: 
      train: /Odyssey/public/enatl60/sst/eNATL60-BLB002-SST-2009-2010-1_20.nc
      test: /Odyssey/public/natl60/sst/NATL60-CJM165-SST-2009-2010-1_20.nc
      
    inp_ssh: 
      train: /Odyssey/public/enatl60/ssh/eNATL60-BLB002-ssh-2009-2010-${resolution}.nc
      #train: /Odyssey/public/enatl60/ssh/eNATL60-BLB002-7nadirs-2009-2010-${resolution}.nc
      test: /Odyssey/public/natl60/ssh/NATL60-CJM165-ssh-2012-2013-${resolution}.nc
    
    tgt:
      train: '/Odyssey/public/enatl60/celerity/eNATL60_BLB002_cutoff_freq_regrid_0_1000m.nc'
      test: '/Odyssey/public/natl60/celerity/NATL60GULF-CJM165_cutoff_freq_regrid_0_1000m.nc'
    
    tgt_pca:
      train: '/Odyssey/public/enatl60/celerity/PCA/eNATL_pca_train.nc'
      test: '/Odyssey/public/natl60/celerity/PCA/NATL_pca_test.nc'
    
    tgt_sst:
      train: /Odyssey/public/enatl60/sst/eNATL60-BLB002-SST-2009-2010-1_20.nc
      test: /Odyssey/public/natl60/sst/NATL60-CJM165-SST-2009-2010-1_20.nc

    tgt_ssh:  
      train: /Odyssey/public/enatl60/ssh/eNATL60-BLB002-ssh-2009-2010-${resolution}.nc
      test:  /Odyssey/public/natl60/ssh/NATL60-CJM165-ssh-2012-2013-${resolution}.nc

trainer:
  _target_: pytorch_lightning.Trainer
  inference_mode: false
  gradient_clip_val: 0.5
  accelerator: gpu
  devices: 1
  logger:
    _target_: pytorch_lightning.loggers.tensorboard.TensorBoardLogger
    save_dir: ${hydra:runtime.output_dir}
    name: ${hydra:runtime.choices.xp}
    version: ''
  max_epochs: 150
  accumulate_grad_batches: 16
  callbacks:
    - _target_: pytorch_lightning.callbacks.LearningRateMonitor
    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
      monitor: val_mse
      save_top_k: 3
      filename: '{val_mse:.5f}-{epoch:03d}'

datamodule:
  xrds_kw:
    patch_dims: { time: 15, component: 5, lat: 240, lon: 240}
    strides: { time: 1, component: 1, lat: 200, lon: 200}
  dl_kw: {batch_size: 8, num_workers: 1}
  aug_kw:
    aug_factor: 2

train_dm:
  _target_: contrib.model_depth.TransfertDataModule
  input_da:
    _target_: contrib.model_depth.load_natl_data_pca
    tgt_path: ${paths.tgt_pca.train}
    tgt_var: pca_train
    inp_path: ${paths.inp_pca.train}
    inp_var: pca_train
    domain: ${domain.train}
  domains:
    train:
      time: {_target_: builtins.slice, _args_: ['2009-07-01', '2010-04-09']}
    val:
      time: {_target_: builtins.slice, _args_: ['2010-04-10','2010-06-30']}
    test: null
  xrds_kw:
    patch_dims: ${datamodule.xrds_kw.patch_dims}
    strides: ${datamodule.xrds_kw.strides}
    domain_limits: ${domain.train}
  dl_kw: ${datamodule.dl_kw}
  aug_kw: ${datamodule.aug_kw}
  norm_type: 'z_score'


test_dm:
  _target_: contrib.model_depth.TransfertDataModule
  input_da:
    _target_: contrib.model_depth.load_natl_data_pca
    tgt_path: ${paths.tgt_pca.test}
    tgt_var: pca_test
    inp_path: ${paths.inp_pca.test}
    inp_var: pca_test
    domain: ${domain.train}
  domains:
    train: null
    val: null
    test:
      time: {_target_: builtins.slice, _args_: ['2012-10-01', '2013-09-30']}
      #time: {_target_: builtins.slice, _args_: ['2013-06-15', '2013-09-10']} #['2013-06-01', '2013-09-30']}
  mean_std_domain: test
  xrds_kw:
    patch_dims: ${datamodule.xrds_kw.patch_dims}
    strides: ${datamodule.xrds_kw.strides}
    domain_limits: ${domain.train}
  dl_kw: ${datamodule.dl_kw}
  aug_kw: ${datamodule.aug_kw}
  norm_type: 'z_score'
  std_c: 1.

model:
  _target_: contrib.model_depth.Lit4dVarNet_depth
  persist_rw: false
  opt_fn:
    _target_: contrib.model_depth.cosanneal_lr_adamw
    _partial_: true
    lr: 1e-3
    T_max: ${trainer.max_epochs}
    weight_decay: 1e-3
  rec_weight:
    _target_: src.utils.get_triang_time_wei_coeff
    patch_dims: ${datamodule.xrds_kw.patch_dims}
    crop: {time: 0, lat: 20, lon: 20}
    offset:  1
  solver:
    _target_: src.models.GradSolver
    n_step: 10
    lr_grad: 1e3
    prior_cost:
      _target_: src.models.BilinAEPriorCost
      dim_in: 75 #${datamodule.xrds_kw.patch_dims.time} * ${datamodule.xrds_kw.patch_dims.component}
      dim_hidden: 32
      bilin_quad: false
      downsamp: 2
    obs_cost:
      _target_: src.models.BaseObsCost
    grad_mod:
      _target_: src.models.ConvLstmGradModel
      dim_in: 75 #${datamodule.xrds_kw.patch_dims.time} * ${datamodule.xrds_kw.patch_dims.component}
      dim_hidden: 48
    weight_obs: 1. 
    weight_prior: 1.
  sampling_rate: 0.001
  #norm_type: 'z_score'
  test_metrics: ${metrics.test_metrics}
  pre_metric_fn:
    _target_: xarray.Dataset.sel
    _partial_: True
    time: {_target_: builtins.slice, _args_: ['2012-10-21', '2013-09-10']}
    #time: {_target_: builtins.slice, _args_: ['2013-07-11', '2013-08-20']} #['2013-06-21', '2013-09-10']}
    lat: ${domain.test.lat}
    lon: ${domain.test.lon}

metrics:
  nrmse_scores: {_target_: src.utils.rmse_based_scores_from_ds, _partial_: true}
  psd_scores: {_target_: src.utils.psd_based_scores_from_ds, _partial_: true}
  get0: {_target_: operator.itemgetter, _args_: [0]}
  get1: {_target_: operator.itemgetter, _args_: [1]}
  test_metrics:
    mu:
      _target_: src.utils.pipe
      _partial_: true
      fns: ['${metrics.nrmse_scores}', '${metrics.get0}']
    sig:
      _target_: src.utils.pipe
      _partial_: true
      fns: ['${metrics.nrmse_scores}', '${metrics.get1}']
    lx:
      _target_: src.utils.pipe
      _partial_: true
      fns: ['${metrics.psd_scores}', '${metrics.get0}']
    lt:
      _target_: src.utils.pipe
      _partial_: true
      fns: ['${metrics.psd_scores}', '${metrics.get1}']

entrypoints:
  - _target_: pytorch_lightning.seed_everything
    seed: 333
  - _target_: contrib.model_depth.run  # fit + test
    trainer: ${trainer}
    lit_mod: ${model}
    train_dm: ${train_dm}
    test_dm: ${test_dm}
    ckpt: ${ckpt}

defaults:
  - /domain: gf
  - _self_